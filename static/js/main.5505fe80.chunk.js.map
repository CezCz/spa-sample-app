{"version":3,"sources":["components/AEMPage.js","components/Page.js","components/Text.js","App.js","serviceWorker.js","server/CustomModelClient.js","index.js"],"names":["AEMPage","this","childComponents","childPages","withMappable","Page","TextEditConfig","emptyLabel","isEmpty","props","text","trim","length","resourceType","Text","cqPath","richText","className","id","substr","lastIndexOf","data-rte-editelement","dangerouslySetInnerHTML","__html","MapTo","ResponsiveGrid","App","Boolean","window","location","hostname","match","FETCH_CONFIG","headers","modelClient","modelPath","err","Promise","reject","Error","url","_apiHost","fetch","then","response","status","json","error","statusText","ModelClient","ModelManager","initializeAsync","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"kSAeeA,E,uKAVP,OACI,6BACKC,KAAKC,gBACLD,KAAKE,gB,GCJPC,uBAAaC,SCDfC,EAAiB,CAC1BC,WAAY,OACZC,QAAS,SAASC,GACd,OAAQA,IAAUA,EAAMC,MAAQD,EAAMC,KAAKC,OAAOC,OAAS,GAE/DC,aAAc,+CAGZC,EAAO,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,SAAUN,EAAW,EAAXA,KAI9B,OAAOM,EAFH,yBAAKC,UAAU,WAAWC,GAAIH,EAAOI,OAAOJ,EAAOK,YAAY,KAAO,GAAIC,wBAAA,EAAqBC,wBAAyB,CAACC,OAAQb,KAE9F,yBAAKO,UAAU,YAAYP,IAGvDI,IAEQV,uBAAaU,EAAMR,GCH1CkB,gBAAM,iCAANA,CAAwCV,EAAMR,GAC9CkB,gBAAM,2CAANA,CAAkDC,kBAEnCC,MAXH,WACV,OACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,QCAcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBAC,EAAe,CACjBC,QAAS,ICQPC,EAAc,IDFpB,mRAQUC,GACF,IAAKA,EAAW,CACZ,IAAMC,EAAM,qCAAuCD,EACnD,OAAOE,QAAQC,OAAO,IAAIC,MAAMH,IAIpC,IAAMI,EAAG,UAAMvC,KAAKwC,UAAX,OAAsBN,GAC/B,OAAOO,MAAMF,EAAKR,GAAcW,MAAK,SAASC,GAC1C,GAAIA,EAASC,QAAU,KAAOD,EAASC,OAAS,IAC/C,OAAOD,EAASE,OAEb,IAAMC,EAAQ,IAAIR,MAAM,qCAAuCC,EAAKI,EAASI,YAAcJ,EAASC,QAErG,OADCE,EAAMH,SAAWA,EACXP,QAAQC,OAAOS,YAtBrC,GAAuCE,eCEnB,CAAsB,yBAC1CC,eAAaC,gBAAgB,CACzBjB,gBAGJkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SF+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAFjB,OAIS,SAAAd,GACLe,QAAQf,MAAMA,EAAMgB,c","file":"static/js/main.5505fe80.chunk.js","sourcesContent":["import React from 'react';\nimport Page from './Page';\n\nclass AEMPage extends Page {\n    render() {\n        return (\n            <div>\n                {this.childComponents}\n                {this.childPages}\n            </div>\n        );\n    }\n}\n\n\nexport default AEMPage;\n","import {\n    Page, withMappable\n} from '@adobe/aem-react-editable-components';\n\nexport default withMappable(Page);\n","import React from 'react';\nimport { withMappable } from '@adobe/aem-react-editable-components';\n\nexport const TextEditConfig = {\n    emptyLabel: 'Text',\n    isEmpty: function(props) {\n        return !props || !props.text || props.text.trim().length < 1;\n    },\n    resourceType: \"editorxpdevelopment/components/content/text\"\n};\n\nconst Text = ({ cqPath, richText, text }) => {\n    const richTextContent = () => (\n        <div className=\"aem_text\" id={cqPath.substr(cqPath.lastIndexOf('/') + 1)} data-rte-editelement dangerouslySetInnerHTML={{__html: text}}/>\n    );\n    return richText ? richTextContent() : (<div className=\"aem_text\">{text}</div>);\n};\n\nexport default Text;\n\nexport const AEMText = withMappable(Text, TextEditConfig);\n","import React from 'react';\nimport './App.css';\nimport {\n    MapTo, ResponsiveGrid\n} from '@adobe/aem-react-editable-components';\n\nimport AEMPage from './components/AEMPage';\nimport Text, {TextEditConfig} from \"./components/Text\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <AEMPage />\n    </div>\n  );\n}\n\nMapTo('wknd-spa-react/components/text')(Text, TextEditConfig);\nMapTo('wcm/foundation/components/responsivegrid')(ResponsiveGrid);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ModelClient } from '@adobe/aem-spa-page-model-manager';\n\nconst FETCH_CONFIG = {\n    headers: {}\n};\n\n/**\n * Custom ModelClient meant to demonstrate how to customize the request sent to the remote server\n */\nexport class CustomModelClient extends ModelClient {\n\n    /**\n     * Fetches a model using the given a resource path\n     *\n     * @param {string} modelPath - Path to the model\n     * @return {*}\n     */\n    fetch(modelPath) {\n        if (!modelPath) {\n            const err = 'Fetching model rejected for path: ' + modelPath;\n            return Promise.reject(new Error(err));\n        }\n\n        // Either the API host has been provided or we make an absolute request relative to the current host\n        const url = `${this._apiHost}${modelPath}`;\n        return fetch(url, FETCH_CONFIG).then(function(response) {\n            if (response.status >= 200 && response.status < 300) {\n             return response.json();\n            } else {\n                const error = new Error('while fetching the model for url: ' + url, response.statusText || response.status);\n                error.response = response;\n               return Promise.reject(error);\n            }\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport { ModelManager } from \"@adobe/aem-spa-page-model-manager\";\n\nimport { CustomModelClient } from './server/CustomModelClient';\n\nconst modelClient = new CustomModelClient('http://localhost:4502');\nModelManager.initializeAsync({\n    modelClient\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}